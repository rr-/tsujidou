#!/usr/bin/env python3
import pickle
import threading
import concurrent.futures
from pathlib import Path
from typing import Tuple, List, Dict, Callable
from lib import engine, script
from lib.tlg import tlg
from lib.snapshot import Snapshot
from lib.open_ext import open_ext, ExtendedHandle
import configargparse


_lock = threading.Lock()
Postprocessor = Callable[[Snapshot, bytes], None]


def image_postprocessor(snapshot: Snapshot, content: bytes) -> None:
    if not snapshot.main_artifact.path.name.endswith('.tlg'):
        return
    if not tlg.is_tlg(content):
        return

    image_path = (
        snapshot.main_artifact.path
        .with_name(snapshot.main_artifact.path.name.lstrip('.'))
        .with_suffix('.png'))
    image_content, metadata = tlg.tlg_to_png(content)
    snapshot.save_extra_artifact('png', image_path, image_content)

    if metadata:
        metadata_path = snapshot.main_artifact.path.with_suffix('.dat')
        snapshot.save_extra_artifact(
            'meta', metadata_path, pickle.dumps(metadata))


def script_postprocessor(snapshot: Snapshot, content: bytes) -> None:
    target_path = (
        snapshot.main_artifact.path
        .with_name(snapshot.main_artifact.path.name.lstrip('.'))
        .with_suffix('.txt'))
    snapshot.save_extra_artifact(
        'script', target_path, script.decode_script(content))


def get_main_artifact_name(entry: engine.FileEntry) -> Path:
    if entry.file_name:
        ret = Path(entry.file_name)
    else:
        ret = Path(
            '{:05d}_{:016x}.dat'.format(entry.file_num, entry.file_name_hash))
    return ret.with_name('.' + ret.name)


def unpack_entry(
        handle: ExtendedHandle,
        entry: engine.FileEntry,
        target_dir: Path,
        postprocessor: Postprocessor) -> Snapshot:
    snapshot = Snapshot(entry)

    target_path = target_dir.joinpath(get_main_artifact_name(entry))

    if not entry.is_extractable:
        print('Ignoring unextractable file {:016x}'.format(
            entry.file_name_hash))
        return snapshot

    try:
        with _lock:  # reading from the shared file handle needs to be atomic
            content = engine.read_file_content(handle, entry)
        snapshot.save_main_artifact(target_path, content)
        postprocessor(snapshot, content)
        print('Saved {:016x} -> {}'.format(
            snapshot.entry.file_name_hash,
            [str(artifact.path) for artifact in snapshot.all_artifacts]))
    except Exception as ex:
        print('Error unpacking {:016x}: {}'.format(entry.file_name_hash, ex))

    return snapshot


def unpack(
        source_path: Path,
        target_dir: Path,
        file_name_hash_map: Dict[int, str],
        postprocessor: Postprocessor) -> List[Snapshot]:
    with open_ext(source_path, 'rb') as handle:
        table = engine.read_file_table(handle, file_name_hash_map)

        def work(entry: engine.FileEntry) -> Snapshot:
            return unpack_entry(handle, entry, target_dir, postprocessor)

        with concurrent.futures.ThreadPoolExecutor(max_workers=8) as executor:
            return list(executor.map(work, table.entries))


def parse_args() -> configargparse.Namespace:
    parser = configargparse.ArgumentParser(
        default_config_files=['./config.ini'])
    parser.add('--game-dir', required=True)
    parser.add('--data-dir', required=True, default='./data')
    parser.add(
        '--file-names', default='file-names.lst',
        help='used for extracting non-scripts')
    return parser.parse_args()


def main() -> None:
    args = parse_args()
    game_dir = Path(args.game_dir)
    data_dir = Path(args.data_dir)
    file_name_hash_map = {}  # type: Dict[int, str]

    if args.file_names:
        file_name_hash_map = {
            engine.get_file_name_hash(line.strip()): line.strip()
            for line in Path(args.file_names).open('r', encoding='utf-8')
        }

    directories = {
        'script.dat': ('script', script_postprocessor),
        'arc0.dat': ('arc0', image_postprocessor),
        'arc1.dat': ('arc1', image_postprocessor),
        'arc2.dat': ('arc2', image_postprocessor),
    }  # type: Dict[str, Tuple[str, Postprocessor]]

    for source_name, (target_name, postprocessor) in directories.items():
        source_path = game_dir.joinpath(source_name)
        target_dir = data_dir.joinpath(target_name)

        print('Unpacking directory {} -> {}'.format(source_path, target_dir))
        snapshots = unpack(
            source_path, target_dir, file_name_hash_map, postprocessor)

        snapshot_path = data_dir.joinpath(target_name + '-snapshot.dat')
        with snapshot_path.open('wb') as handle:
            pickle.dump(snapshots, handle)


if __name__ == '__main__':
    main()
